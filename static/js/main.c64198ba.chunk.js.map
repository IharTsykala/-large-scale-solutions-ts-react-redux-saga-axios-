{"version":3,"sources":["shared/constants/loadingStates.enum.ts","Redux/store/Item/Item.actions.ts","Redux/store/Item/Item.reduser.ts","Redux/index.ts","services/service-Item.ts","Redux/store/loading/loading.actions.ts","Redux/store/Item/Item.sagas.ts","Components/ListItems/ListItems.tsx","Components/DescriptionItem/DescriptionItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingState","ActionTypes","getFailureAction","error","type","payload","initialState","listItems","descriptionItem","basePath","combineReducers","item","state","action","axios","require","ServiceItem","getListItemsFromDB","a","response","console","log","data","getDescriptionCurrentItemFromDB","userLink","get","setListItemsLoadingState","loadingState","setDescriptionItemLoadingState","setListItemsInStoreSaga","setDescriptionCurrentItemInStoreSaga","itemSaga","actions","put","loading","responce","length","basepath","loaded","notFound","id","takeEvery","connect","dispatch","useEffect","stateLoading","Box","component","display","className","List","map","ListItem","key","button","ListItemText","primary","name","shortInfo","DescriptionItem","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c64198ba.chunk.js","sourcesContent":["export enum LoadingState {\r\n  loading = \"loading\",\r\n  loaded = \"loaded\",\r\n  notFound = \"notFound\",\r\n  error = \"error\"\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { Item } from \"../../InterfacesEntity/Item.interface\"\r\nimport { DescriptionItem } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\n\r\nexport const ActionTypes = {\r\n  GET_LIST_ITEMS_FROM_DB: \"[item] get list items from DB \",\r\n  SET_LIST_ITEMS_IN_STORE: \"[item] set list items in store \",\r\n  SET_BASE_PATH_IN_STORE: \"[path] set base path in store\",\r\n  GET_DESCRIPTION_CURRENT_ITEM_FROM_DB:\r\n    \"[description] get description current item from DB \",\r\n  SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n    \"[description] set description current item in store \",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const getListItemsFromDB = (): Action<{}> => ({\r\n  type: ActionTypes.GET_LIST_ITEMS_FROM_DB,\r\n})\r\n\r\nexport const setListItemsInStore = (listItems: [Item]): Action<[Item]> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_IN_STORE,\r\n  payload: listItems,\r\n})\r\n\r\nexport const setBasePathInStore = (basePath: string): Action<string> => ({\r\n  type: ActionTypes.SET_BASE_PATH_IN_STORE,\r\n  payload: basePath,\r\n})\r\n\r\nexport const getDescriptionCurrentItemFromDB = (\r\n  basePath: string,\r\n  userLink: string\r\n): Action<any> => ({\r\n  type: ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n  payload: { basePath, userLink },\r\n})\r\n\r\nexport const setDescriptionCurrentItemInStore = (\r\n  descriptionItem: DescriptionItem\r\n): Action<DescriptionItem> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE,\r\n  payload: descriptionItem,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { Item } from \"../../InterfacesEntity/Item.interface\"\r\nimport { DescriptionItem } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\nimport { ActionTypes } from \"./Item.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n\tlistItems: [Item]\r\n\tdescriptionItem: DescriptionItem\r\n\tbasePath: string\r\n}\r\n\r\nconst initialState: State = {\r\n  listItems: [{} as Item],\r\n  descriptionItem: [{} as DescriptionItem],\r\n  basePath: '',\r\n}\r\n\r\nexport const itemReducer = (\r\n  state: State = initialState,\r\n  action: Action<[{}]>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_LIST_ITEMS_IN_STORE:\r\n    return {\r\n      ...state,\r\n\t\t\tlistItems: action.payload\r\n    }\r\n\t\tcase ActionTypes.SET_BASE_PATH_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n\t\t\t\tbasePath: action.payload\r\n\t\t  }\r\n\t\tcase ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n\t\t\t\tdescriptionItem: action.payload\r\n\t\t  }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { itemReducer } from \"./store/Item/Item.reduser\"\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n})\r\n","const axios = require(\"axios\")\r\n\r\nexport default class ServiceItem {\r\n  static getListItemsFromDB = async () => {\r\n    try {\r\n      const response = await axios(`https://mrsoft.by/tz20/list.json`)\r\n      console.log(response)\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getDescriptionCurrentItemFromDB = async (\r\n    basePath: string,\r\n    userLink: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(`${basePath}${userLink}`)\r\n      return response\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LIST_ITEMS_LOADING_STATE: \"[loading] set list items loading state\",\r\n  SET_DESCRIPTION_ITEM_LOADING_STATE:\r\n    \"[loading] set description item loading state\",\r\n}\r\n\r\nexport const setListItemsLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n\r\nexport const setDescriptionItemLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_ITEM_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport ServiceItem from \"../../../services/service-Item\"\r\nimport { LoadingState } from \"../../../shared/constants/loadingStates.enum\"\r\nimport {\r\n  ActionTypes,\r\n  setListItemsInStore,\r\n  setDescriptionCurrentItemInStore,\r\n  setBasePathInStore,\r\n  getFailureAction,\r\n} from \"./Item.actions\"\r\n\r\nimport {\r\n  setListItemsLoadingState,\r\n  setDescriptionItemLoadingState,\r\n} from \"../loading/loading.actions\"\r\n\r\nfunction* setListItemsInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setListItemsLoadingState(LoadingState.loading))\r\n    const responce = yield ServiceItem.getListItemsFromDB()\r\n    if (responce.data.length) {\r\n      yield put(setListItemsInStore(responce.data))\r\n      yield put(setBasePathInStore(responce.basepath))\r\n      yield put(setListItemsLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setListItemsLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setListItemsLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* setDescriptionCurrentItemInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.loading))\r\n    const response = yield ServiceItem.getDescriptionCurrentItemFromDB(\r\n      actions.payload.basePath,\r\n      actions.payload.userLink\r\n    )\r\n    if (response.id) {\r\n      yield put(setDescriptionCurrentItemInStore(response))\r\n      yield put(setDescriptionItemLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setDescriptionItemLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* itemSaga() {\r\n  yield takeEvery(ActionTypes.GET_LIST_ITEMS_FROM_DB, setListItemsInStoreSaga)\r\n  yield takeEvery(\r\n    ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n    setDescriptionCurrentItemInStoreSaga\r\n  )\r\n}\r\n","import React, {useEffect, useState} from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { getListItemsFromDB } from \"../../Redux/store/Item/Item.actions\"\r\nimport { Item } from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport { DescriptionItem } from \"../../Redux/InterfacesEntity/DescriptionItem.interface\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\"\r\nimport Box from \"@material-ui/core/Box\"\r\n\r\nconst stateLoading:string = 'loaded'\r\n\r\ntype ListItemsProps = {\r\n\tlistItems: [Item]\r\n\tdescriptionItem: DescriptionItem\r\n\tdispatch: any\r\n}\r\n\r\nconst ListItems: React.FunctionComponent<ListItemsProps> = ({\r\n  listItems,\r\n  descriptionItem,\r\n  dispatch\r\n}) => {\r\n\r\n  useEffect(()=>{\r\n    dispatch(getListItemsFromDB())\r\n  },[dispatch])\r\n\r\n  return (\r\n    <>\r\n      {stateLoading === \"loading\" && <h1>Ожидайте ответа</h1>}\r\n      {stateLoading === \"loaded\" && (\r\n        <Box\r\n          component=\"div\"\r\n          display=\"grid\"\r\n          className={'listItemsContainer'}\r\n        >\r\n          <List\r\n            className={\r\n              'listItemsContainer_list'\r\n            }\r\n          >\r\n            {(listItems.length > 0 &&\r\n\t\t\t\t\t\t\tlistItems[0].id &&\r\n\t\t\t\t\t\t\tlistItems.map((item: Item) => (\r\n\t\t\t\t\t\t\t  <ListItem\r\n\t\t\t\t\t\t\t    key={item.id}\r\n\t\t\t\t\t\t\t    button\r\n\t\t\t\t\t\t\t    // onClick={() => dispatch(setCurrentDialogInStore(dialog))}\r\n\t\t\t\t\t\t\t  >\r\n\t\t\t\t\t\t\t    <ListItemText\r\n\t\t\t\t\t\t\t      id={item.id}\r\n\t\t\t\t\t\t\t      primary={`${item.name}`}\r\n\t\t\t\t\t\t\t    />\r\n\t\t\t\t\t\t\t    <ListItemText\r\n\t\t\t\t\t\t\t      id={item.id}\r\n\t\t\t\t\t\t\t      primary={`${item.shortInfo}`}\r\n\t\t\t\t\t\t\t    />\r\n\t\t\t\t\t\t\t  </ListItem>\r\n\t\t\t\t\t\t\t)))}\r\n\r\n          </List>\r\n        </Box>\r\n      )}\r\n      {stateLoading === \"notFound\" && <h1>not found</h1>}\r\n      {stateLoading === \"error\" && <h1>ошибка</h1>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  listItems: state.item.listItems,\r\n  descriptionItem: state.item.descriptionItem,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ListItems)\r\n","import React, { useState } from \"react\"\r\n\r\n// type SearchProps = {\r\n//   dispatch: any,\r\n// }\r\n\r\nconst DescriptionItem: React.FunctionComponent = () => {\r\n  return <div>2</div>\r\n}\r\n\r\n// const mapStateToProps = (state: any) => ({\r\n//   searchStringState: state.pagination.searchString,\r\n// })\r\n\r\nexport default DescriptionItem\r\n","import React from \"react\"\nimport \"./App.css\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport itemSaga from \"./Redux/store/Item/Item.sagas\"\nimport ListItems from \"./Components/ListItems/ListItems\"\nimport DescriptionItem from \"./Components/DescriptionItem/DescriptionItem\"\nimport Box from \"@material-ui/core/Box\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(itemSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Box component=\"div\" className={\"wrapper\"}>\n      <ListItems />\n      <DescriptionItem />\n    </Box>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
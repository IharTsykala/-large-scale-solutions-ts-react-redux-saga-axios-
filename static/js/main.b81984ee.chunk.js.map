{"version":3,"sources":["shared/constants/loadingStates.enum.ts","Redux/store/Item/Item.actions.ts","Redux/store/Item/Item.reduser.ts","Redux/index.ts","services/service-Item.ts","Redux/store/loading/loading.actions.ts","Redux/store/Item/Item.sagas.ts","Components/CardItem/CardItem.tsx","Components/ListItems/ListItems.tsx","Components/DescriptionItem/DescriptionItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingState","ActionTypes","getFailureAction","error","type","payload","initialState","listItems","removedListItems","descriptionItem","basePath","combineReducers","item","state","action","newListItems","map","id","removed","itemId","removedData","data","console","log","recoveredData","filter","concat","sort","a","b","name","toLowerCase","axios","require","ServiceItem","getListItemsFromDB","get","response","getDescriptionCurrentItemFromDB","userLink","setListItemsLoadingState","loadingState","setDescriptionItemLoadingState","setListItemsInStoreSaga","setDescriptionCurrentItemInStoreSaga","itemSaga","actions","put","loading","length","basepath","loaded","notFound","takeEvery","CardItem","dispatch","className","useEffect","handleToggle","e","setStatusForItemInRemovedListItems","removeItemFromRemovedListItem","concatItemToListItems","setRemoveDataForItem","Date","toString","slice","removeItemFromListItem","concatItemToRemovedListItems","onClick","more","Box","component","shortInfo","onChange","checked","undefined","connect","stateLoading","display","List","key","bio","pic","src","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b81984ee.chunk.js","sourcesContent":["export enum LoadingState {\r\n  loading = \"loading\",\r\n  loaded = \"loaded\",\r\n  notFound = \"notFound\",\r\n  error = \"error\"\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { ItemInterface } from \"../../InterfacesEntity/Item.interface\"\r\nimport { DescriptionItemInterface } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\n\r\nexport const ActionTypes = {\r\n  GET_LIST_ITEMS_FROM_DB: \"[item] get list items from DB \",\r\n  SET_LIST_ITEMS_IN_STORE: \"[item] set list items in store \",\r\n  SET_STATUS_FOR_ITEM_IN_LIST_ITEMS: \"[item] set status for item in list items\",\r\n  SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS:\r\n    \"[item] set status for item in removed list items\",\r\n  SET_REMOVE_DATA_FOR_ITEM: \"[item] set remove data for item\",\r\n  SET_RECOVER_DATA_FOR_ITEM: \"[item] set recover data for item\",\r\n  REMOVE_ITEM_FROM_LIST_ITEMS: \"[item] remove item from list items\",\r\n  REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS:\r\n    \"[item] remove item from removed list items\",\r\n  CONCAT_ITEM_TO_LIST_ITEMS: \"[item] concat item to list items\",\r\n  CONCAT_ITEM_TO_REMOVED_LIST_ITEMS: \"[item] concat item to removed list items\",\r\n  SORT_LIST_ITEMS_IN_STORE: \"[item] sort list items in store\",\r\n  SORT_REMOVED_LIST_ITEMS_IN_STORE: \"[item] sort removed list items in store\",\r\n  SET_BASE_PATH_IN_STORE: \"[path] set base path in store\",\r\n  GET_DESCRIPTION_CURRENT_ITEM_FROM_DB:\r\n    \"[description] get description current item from DB\",\r\n  SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n    \"[description] set description current item in store\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const getListItemsFromDB = (): Action<{}> => ({\r\n  type: ActionTypes.GET_LIST_ITEMS_FROM_DB,\r\n})\r\n\r\nexport const setListItemsInStore = (\r\n  listItems: [ItemInterface]\r\n): Action<[ItemInterface]> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_IN_STORE,\r\n  payload: listItems,\r\n})\r\n\r\nexport const setStatusForItemInListItems = (\r\n  itemId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_STATUS_FOR_ITEM_IN_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const setStatusForItemInRemovedListItems = (\r\n  itemId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const setRemoveDataForItem = (\r\n  itemId: string,\r\n  data: string\r\n): Action<any> => ({\r\n  type: ActionTypes.SET_REMOVE_DATA_FOR_ITEM,\r\n  payload: { itemId, data },\r\n})\r\n\r\nexport const setRecoverDataForItem = (\r\n  itemId: string,\r\n  data: string\r\n): Action<any> => ({\r\n  type: ActionTypes.SET_RECOVER_DATA_FOR_ITEM,\r\n  payload: { itemId, data },\r\n})\r\n\r\nexport const removeItemFromListItem = (itemId: string): Action<any> => ({\r\n  type: ActionTypes.REMOVE_ITEM_FROM_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const removeItemFromRemovedListItem = (itemId: string): Action<any> => ({\r\n  type: ActionTypes.REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const concatItemToListItems = (\r\n  item: ItemInterface\r\n): Action<ItemInterface> => ({\r\n  type: ActionTypes.CONCAT_ITEM_TO_LIST_ITEMS,\r\n  payload: item,\r\n})\r\n\r\nexport const concatItemToRemovedListItems = (\r\n  item: ItemInterface\r\n): Action<ItemInterface> => ({\r\n  type: ActionTypes.CONCAT_ITEM_TO_REMOVED_LIST_ITEMS,\r\n  payload: item,\r\n})\r\n\r\nexport const setBasePathInStore = (basePath: string): Action<string> => ({\r\n  type: ActionTypes.SET_BASE_PATH_IN_STORE,\r\n  payload: basePath,\r\n})\r\n\r\nexport const getDescriptionCurrentItemFromDB = (\r\n  basePath: string,\r\n  userLink: string\r\n): Action<any> => ({\r\n  type: ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n  payload: { basePath, userLink },\r\n})\r\n\r\nexport const setDescriptionCurrentItemInStore = (\r\n  descriptionItem: DescriptionItemInterface\r\n): Action<DescriptionItemInterface> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE,\r\n  payload: descriptionItem,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import {ItemInterface} from \"../../InterfacesEntity/Item.interface\"\r\nimport {DescriptionItemInterface} from \"../../InterfacesEntity/DescriptionItem.interface\"\r\nimport { ActionTypes } from \"./Item.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n\tlistItems: [ItemInterface]\r\n\tremovedListItems: []\r\n\tdescriptionItem: DescriptionItemInterface\r\n\tbasePath: string\r\n}\r\n\r\nconst initialState: State = {\r\n  listItems: [{} as ItemInterface],\r\n  removedListItems: [],\r\n  descriptionItem: {} as DescriptionItemInterface,\r\n  basePath: '',\r\n}\r\n\r\nexport const itemReducer = (\r\n  state: State = initialState,\r\n  action: Action<[{}]>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_LIST_ITEMS_IN_STORE:\r\n    return {\r\n      ...state,\r\n      listItems: action.payload\r\n    }\r\n  case ActionTypes.SET_STATUS_FOR_ITEM_IN_LIST_ITEMS:\r\n  {let newListItems = state.listItems.map(item=> {\r\n    // @ts-ignore\r\n    if(item.id === action.payload) item.removed = true\r\n    return item\r\n  })\r\n  return {\r\n    ...state,\r\n    listItems: newListItems\r\n  }}\r\n  case ActionTypes.SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS:\r\n  {let newListItems = state.removedListItems.map(item=> {\r\n    // @ts-ignore\r\n    if(item.id === action.payload) item.removed = false\r\n    return item\r\n  })\r\n  return {\r\n    ...state,\r\n    removedListItems: newListItems\r\n  }}\r\n  case ActionTypes.SET_REMOVE_DATA_FOR_ITEM:\r\n  { let newListItems = state.listItems.map(item=> {\r\n    // @ts-ignore\r\n    if(item.id === action.payload.itemId) {\r\n      // @ts-ignore\r\n      item.removedData = action.payload!.data\r\n    }\r\n    return item\r\n  })\r\n  return {\r\n    ...state,\r\n    listItems: newListItems\r\n  }}\r\n  case ActionTypes.SET_RECOVER_DATA_FOR_ITEM:\r\n  { let newListItems = state.removedListItems.map(item=> {\r\n    // @ts-ignore\r\n    // console.log(action.payload!.data)\r\n    // @ts-ignore\r\n    if(item.id === action.payload.itemId) {\r\n      // @ts-ignore\r\n    \tconsole.log(action.payload!.data)\r\n      // @ts-ignore\r\n      item.recoveredData = action.payload!.data\r\n    }\r\n    return item\r\n  })\r\n  return {\r\n    ...state,\r\n    listItems: newListItems\r\n  }}\r\n  case ActionTypes.REMOVE_ITEM_FROM_LIST_ITEMS:\r\n  {\r\n    // @ts-ignore\r\n    let newListItems = state.listItems.filter(item=>item.id !== action.payload)\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  \tcase ActionTypes.REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS:\r\n  {\r\n    // @ts-ignore\r\n    let newListItems = state.removedListItems.filter(item=>item.id !== action.payload)\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n  case ActionTypes.CONCAT_ITEM_TO_LIST_ITEMS:\r\n  {\r\n    // @ts-ignore\r\n    let newListItems = state.listItems.concat(action.payload).sort(\r\n      (a: ItemInterface, b: ItemInterface) =>{\r\n        if(a.name && b.name) return  a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n        return 0\r\n      }\r\n    )\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  case ActionTypes.CONCAT_ITEM_TO_REMOVED_LIST_ITEMS:\r\n  {\r\n    // @ts-ignore\r\n    let newListItems = state.removedListItems.concat(action.payload).sort(\r\n      (a: ItemInterface, b: ItemInterface) =>{\r\n      \tif(a.name && b.name) return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n        return 0\r\n      }\r\n    )\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n\r\n  case ActionTypes.SET_BASE_PATH_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n      basePath: action.payload\r\n\t\t  }\r\n  case ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n      descriptionItem: action.payload\r\n\t\t  }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { itemReducer } from \"./store/Item/Item.reduser\"\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n})\r\n","const axios = require(\"axios\")\r\n\r\nexport default class ServiceItem {\r\n  static getListItemsFromDB = async () => {\r\n    try {\r\n      const response = await axios.get(`https://mrsoft.by/tz20/list.json`)\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getDescriptionCurrentItemFromDB = async (\r\n    basePath: string,\r\n    userLink: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(`${basePath}${userLink}`)\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LIST_ITEMS_LOADING_STATE: \"[loading] set list items loading state\",\r\n  SET_DESCRIPTION_ITEM_LOADING_STATE:\r\n    \"[loading] set description item loading state\",\r\n}\r\n\r\nexport const setListItemsLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n\r\nexport const setDescriptionItemLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_ITEM_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport ServiceItem from \"../../../services/service-Item\"\r\nimport { LoadingState } from \"../../../shared/constants/loadingStates.enum\"\r\nimport { ItemInterface } from \"../../InterfacesEntity/Item.interface\"\r\nimport {\r\n  ActionTypes,\r\n  setListItemsInStore,\r\n  setDescriptionCurrentItemInStore,\r\n  setBasePathInStore,\r\n  getFailureAction,\r\n} from \"./Item.actions\"\r\n\r\nimport {\r\n  setListItemsLoadingState,\r\n  setDescriptionItemLoadingState,\r\n} from \"../loading/loading.actions\"\r\n\r\nfunction* setListItemsInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setListItemsLoadingState(LoadingState.loading))\r\n    const response = yield ServiceItem.getListItemsFromDB()\r\n    if (response.data.length && response.data[0].id) {\r\n      yield response.data.sort((a: ItemInterface, b: ItemInterface) =>\r\n        a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n      )\r\n      yield put(setListItemsInStore(response.data))\r\n      yield put(setBasePathInStore(response.basepath))\r\n      yield put(setListItemsLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setListItemsLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setListItemsLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* setDescriptionCurrentItemInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.loading))\r\n    const response = yield ServiceItem.getDescriptionCurrentItemFromDB(\r\n      actions.payload.basePath,\r\n      actions.payload.userLink\r\n    )\r\n    if (response.id) {\r\n      yield put(setDescriptionCurrentItemInStore(response))\r\n      yield put(setDescriptionItemLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setDescriptionItemLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* itemSaga() {\r\n  yield takeEvery(ActionTypes.GET_LIST_ITEMS_FROM_DB, setListItemsInStoreSaga)\r\n  yield takeEvery(\r\n    ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n    setDescriptionCurrentItemInStoreSaga\r\n  )\r\n}\r\n","import React, {useEffect} from \"react\"\r\nimport { ItemInterface } from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport {\r\n  concatItemToListItems, concatItemToRemovedListItems,\r\n  getDescriptionCurrentItemFromDB,\r\n  removeItemFromListItem,\r\n  removeItemFromRemovedListItem,\r\n  setRecoverDataForItem,\r\n  setRemoveDataForItem, setStatusForItemInListItems, setStatusForItemInRemovedListItems,\r\n} from \"../../Redux/store/Item/Item.actions\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\ntype CardItemProps = {\r\n  item: ItemInterface,\r\n\tbasePath:string\r\n\tdispatch: any\r\n\tclassName: string\r\n}\r\n\r\nconst CardItem: React.FunctionComponent<CardItemProps> = ({ item, basePath, dispatch, className }) => {\r\n\r\n  useEffect(()=>{console.log('hi')}, [item])\r\n\r\n  const handleToggle = (e:any, removed:boolean) => {\r\n  \t// e.stopPropagation()\r\n    if(!removed) {\r\n      dispatch(setStatusForItemInListItems(item.id))\r\n      dispatch(setRemoveDataForItem(item.id, new Date().toString().slice(0,24)))\r\n      dispatch(removeItemFromListItem(item.id))\r\n      dispatch(concatItemToRemovedListItems(item))\r\n    } else {\r\n      dispatch(setStatusForItemInRemovedListItems(item.id))\r\n      // dispatch(setRecoverDataForItem(item.id, new Date().toString().slice(0,24)))\r\n      dispatch(removeItemFromRemovedListItem(item.id))\r\n      dispatch( concatItemToListItems(item))\r\n    }\r\n  }\r\n  return (\r\n    <li\r\n      onClick={() =>\r\n        !item.removed && dispatch(getDescriptionCurrentItemFromDB(basePath, item.more))\r\n      }\r\n      className={`${className} cardItemContainer`}\r\n    >\r\n      <Box component=\"div\" className={'cardItemContainer_info'}>\r\n        <div> {`name: ${item.name}`} </div>\r\n        <div> {`info: ${item.shortInfo}`} </div>\r\n      </Box>\r\n      <Box component=\"div\" className={'cardItemContainer_remove'}>\r\n        <input type=\"checkbox\" onChange={(e)=>handleToggle(e, item.removed || false)}\r\n\t\t\t\t\t\t\t checked={item.removed || false}/>\r\n        <p>\r\n          {(item.removed !== undefined && !item.removed && `recover data: ${item.recoveredData}`) ||\r\n\t\t\t\t\t(item.removed && `remove data: ${item.removedData}`)}\r\n        </p>\r\n      </Box>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default CardItem\r\n","import React, {useEffect} from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { getListItemsFromDB } from \"../../Redux/store/Item/Item.actions\"\r\nimport {ItemInterface} from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport {DescriptionItemInterface} from \"../../Redux/InterfacesEntity/DescriptionItem.interface\"\r\nimport List from \"@material-ui/core/List\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport CardItem from \"../CardItem/CardItem\";\r\n\r\nconst stateLoading:string = 'loaded'\r\n\r\ntype ListItemsProps = {\r\n\tlistItems: [ItemInterface]\r\n\tremovedListItems: [ItemInterface]\r\n\tdescriptionItem: DescriptionItemInterface\r\n\tbasePath: string\r\n\tdispatch: any\r\n}\r\n\r\nconst ListItems: React.FunctionComponent<ListItemsProps> = ({\r\n  listItems,\r\n  removedListItems,\r\n  descriptionItem,\r\n  basePath,\r\n  dispatch\r\n}) => {\r\n\r\n  useEffect(()=>{\r\n    dispatch(getListItemsFromDB())\r\n  },[dispatch])\r\n\r\n  return (\r\n    <>\r\n      {stateLoading === \"loading\" && <h1>loading</h1>}\r\n      {stateLoading === \"loaded\" && (\r\n        <Box\r\n          component=\"div\"\r\n          display=\"grid\"\r\n          className={'listItemsContainer'}\r\n        >\r\n          <List\r\n            className={\r\n              'listItemsContainer_list'\r\n            }\r\n          >\r\n            {(listItems.length > 0 &&\r\n\t\t\t\t\t\t\tlistItems[0].id &&\r\n\t\t\t\t\t\t\tlistItems.concat(removedListItems).map((item: ItemInterface) => (\r\n\t\t\t\t\t\t\t  (!item.removed &&\r\n\t\t\t\t\t\t\t\t\t<CardItem item={item} basePath={basePath} dispatch={dispatch}\r\n\t\t\t\t\t\t\t\t\t  key={item.id} className={'active_cart_item'}/>) ||\r\n\t\t\t\t\t\t\t\t(item.removed &&\r\n\t\t\t\t\t\t\t\t\t<CardItem item={item} basePath={basePath} dispatch={dispatch}\r\n\t\t\t\t\t\t\t\t\t  key={item.id} className={'remove_cart_item'}/>)\r\n\t\t\t\t\t\t\t)))}\r\n          </List>\r\n        </Box>\r\n      )}\r\n      {stateLoading === \"notFound\" && <h1>not found</h1>}\r\n      {stateLoading === \"error\" && <h1>error</h1>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  listItems: state.item.listItems,\r\n  removedListItems: state.item.removedListItems,\r\n  descriptionItem: state.item.descriptionItem,\r\n  basePath: state.item.basePath\r\n})\r\n\r\nexport default connect(mapStateToProps)(ListItems)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { DescriptionItemInterface} from \"../../Redux/InterfacesEntity/DescriptionItem.interface\"\r\nimport Box from \"@material-ui/core/Box\";\r\n// import List from \"@material-ui/core/List\";\r\n// import {ItemInterface} from \"../../Redux/InterfacesEntity/Item.interface\";\r\n// import ListItem from \"@material-ui/core/ListItem\";\r\n// import {getDescriptionCurrentItemFromDB} from \"../../Redux/store/Item/Item.actions\";\r\n// import ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\nconst stateLoading:string = 'loaded'\r\n\r\ntype DescriptionItemProps = {\r\n\tdescriptionItem: DescriptionItemInterface\r\n\tbasePath: string\r\n\tdispatch: any\r\n}\r\n\r\nconst DescriptionItem: React.FunctionComponent<DescriptionItemProps> = ({\r\n  descriptionItem,\r\n  basePath,\r\n  dispatch\r\n}) => {\r\n  return (\r\n    <>\r\n      {stateLoading === \"loading\" && <h1>Ожидайте ответа</h1>}\r\n      {stateLoading === \"loaded\" && (\r\n        <Box\r\n          component=\"div\"\r\n          display=\"grid\"\r\n          className={'descriptionItemContainer'}\r\n        >\r\n          {descriptionItem.bio && `${descriptionItem.bio}`}\r\n          {descriptionItem.pic && <img src={`${basePath}${descriptionItem.pic}`}/>}\r\n        </Box>\r\n      )}\r\n      {stateLoading === \"notFound\" && <h1>not found</h1>}\r\n      {stateLoading === \"error\" && <h1>ошибка</h1>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  descriptionItem: state.item.descriptionItem,\r\n  basePath: state.item.basePath,\r\n})\r\n\r\nexport default connect(mapStateToProps)(DescriptionItem)\r\n","import React from \"react\"\nimport \"./App.css\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport itemSaga from \"./Redux/store/Item/Item.sagas\"\nimport ListItems from \"./Components/ListItems/ListItems\"\nimport DescriptionItem from \"./Components/DescriptionItem/DescriptionItem\"\nimport Box from \"@material-ui/core/Box\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(itemSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Box component=\"div\" className={\"wrapper\"}>\n      <ListItems />\n      <DescriptionItem />\n    </Box>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
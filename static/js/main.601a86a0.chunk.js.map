{"version":3,"sources":["shared/constants/loadingStates.enum.ts","Redux/store/Item/Item.actions.ts","Redux/store/Item/Item.reduser.ts","Redux/index.ts","services/service-Item.ts","Redux/store/loading/loading.actions.ts","Redux/store/Item/Item.sagas.ts","Components/CardItem/CardItem.tsx","Components/ListItems/ListItems.tsx","Components/DescriptionItem/DescriptionItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingState","ActionTypes","getFailureAction","error","type","payload","initialState","listItems","removedListItems","descriptionItem","currentItem","basePath","combineReducers","item","state","action","newListItems","map","id","removed","itemId","removedData","data","recoveredData","filter","concat","sort","a","b","name","toLowerCase","axios","require","ServiceItem","getListItemsFromDB","console","log","get","response","getDescriptionCurrentItemFromDB","userLink","setListItemsLoadingState","loadingState","setDescriptionItemLoadingState","setListItemsInStoreSaga","setDescriptionCurrentItemInStoreSaga","itemSaga","actions","put","loading","length","basepath","loaded","notFound","takeEvery","CardItem","dispatch","className","handleToggle","setStatusForItemInRemovedListItems","setRecoverDataForItem","Date","toString","slice","removeItemFromRemovedListItem","concatItemToListItems","setRemoveDataForItem","removeItemFromListItem","concatItemToRemovedListItems","onClick","more","setCurrentItemInStore","shortInfo","undefined","onChange","checked","connect","useEffect","stateStorage","JSON","parse","localStorage","getItem","setStateFromLocalStorage","setItem","stringify","stateLoading","Box","component","display","List","key","Avatar","alt","src","pic","bio","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.601a86a0.chunk.js","sourcesContent":["export enum LoadingState {\r\n  loading = \"loading\",\r\n  loaded = \"loaded\",\r\n  notFound = \"notFound\",\r\n  error = \"error\",\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { ItemInterface } from \"../../InterfacesEntity/Item.interface\"\r\nimport { DescriptionItemInterface } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_STATE_FROM_LOCAL_STORAGE: \"[state] set state from localStorage\",\r\n  GET_LIST_ITEMS_FROM_DB: \"[item] get list items from DB \",\r\n  SET_LIST_ITEMS_IN_STORE: \"[item] set list items in store \",\r\n  SET_CURRENT_ITEM_IN_STORE: \"[item] set current item in store\",\r\n  SET_STATUS_FOR_ITEM_IN_LIST_ITEMS: \"[item] set status for item in list items\",\r\n  SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS:\r\n    \"[item] set status for item in removed list items\",\r\n  SET_REMOVE_DATA_FOR_ITEM: \"[item] set remove data for item\",\r\n  SET_RECOVER_DATA_FOR_ITEM: \"[item] set recover data for item\",\r\n  REMOVE_ITEM_FROM_LIST_ITEMS: \"[item] remove item from list items\",\r\n  REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS:\r\n    \"[item] remove item from removed list items\",\r\n  CONCAT_ITEM_TO_LIST_ITEMS: \"[item] concat item to list items\",\r\n  CONCAT_ITEM_TO_REMOVED_LIST_ITEMS: \"[item] concat item to removed list items\",\r\n  SORT_LIST_ITEMS_IN_STORE: \"[item] sort list items in store\",\r\n  SORT_REMOVED_LIST_ITEMS_IN_STORE: \"[item] sort removed list items in store\",\r\n  SET_BASE_PATH_IN_STORE: \"[path] set base path in store\",\r\n  GET_DESCRIPTION_CURRENT_ITEM_FROM_DB:\r\n    \"[description] get description current item from DB\",\r\n  SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n    \"[description] set description current item in store\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const setStateFromLocalStorage = (state: {}): Action<{}> => ({\r\n  type: ActionTypes.SET_STATE_FROM_LOCAL_STORAGE,\r\n  payload: state,\r\n})\r\n\r\nexport const getListItemsFromDB = (): Action<{}> => ({\r\n  type: ActionTypes.GET_LIST_ITEMS_FROM_DB,\r\n})\r\n\r\nexport const setCurrentItemInStore = (\r\n  item: ItemInterface\r\n): Action<ItemInterface> => ({\r\n  type: ActionTypes.SET_CURRENT_ITEM_IN_STORE,\r\n  payload: item,\r\n})\r\n\r\nexport const setListItemsInStore = (\r\n  listItems: [ItemInterface]\r\n): Action<[ItemInterface]> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_IN_STORE,\r\n  payload: listItems,\r\n})\r\n\r\nexport const setStatusForItemInListItems = (\r\n  itemId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_STATUS_FOR_ITEM_IN_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const setStatusForItemInRemovedListItems = (\r\n  itemId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const setRemoveDataForItem = (\r\n  itemId: string,\r\n  data: string\r\n): Action<any> => ({\r\n  type: ActionTypes.SET_REMOVE_DATA_FOR_ITEM,\r\n  payload: { itemId, data },\r\n})\r\n\r\nexport const setRecoverDataForItem = (\r\n  itemId: string,\r\n  data: string\r\n): Action<any> => ({\r\n  type: ActionTypes.SET_RECOVER_DATA_FOR_ITEM,\r\n  payload: { itemId, data },\r\n})\r\n\r\nexport const removeItemFromListItem = (itemId: string): Action<any> => ({\r\n  type: ActionTypes.REMOVE_ITEM_FROM_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const removeItemFromRemovedListItem = (itemId: string): Action<any> => ({\r\n  type: ActionTypes.REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS,\r\n  payload: itemId,\r\n})\r\n\r\nexport const concatItemToListItems = (\r\n  item: ItemInterface\r\n): Action<ItemInterface> => ({\r\n  type: ActionTypes.CONCAT_ITEM_TO_LIST_ITEMS,\r\n  payload: item,\r\n})\r\n\r\nexport const concatItemToRemovedListItems = (\r\n  item: ItemInterface\r\n): Action<ItemInterface> => ({\r\n  type: ActionTypes.CONCAT_ITEM_TO_REMOVED_LIST_ITEMS,\r\n  payload: item,\r\n})\r\n\r\nexport const setBasePathInStore = (basePath: string): Action<string> => ({\r\n  type: ActionTypes.SET_BASE_PATH_IN_STORE,\r\n  payload: basePath,\r\n})\r\n\r\nexport const getDescriptionCurrentItemFromDB = (\r\n  basePath: string,\r\n  userLink: string\r\n): Action<any> => ({\r\n  type: ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n  payload: { basePath, userLink },\r\n})\r\n\r\nexport const setDescriptionCurrentItemInStore = (\r\n  descriptionItem: DescriptionItemInterface\r\n): Action<DescriptionItemInterface> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE,\r\n  payload: descriptionItem,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import {ItemInterface} from \"../../InterfacesEntity/Item.interface\"\r\nimport {DescriptionItemInterface} from \"../../InterfacesEntity/DescriptionItem.interface\"\r\nimport { ActionTypes } from \"./Item.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n\tlistItems: [ItemInterface],\r\n\tremovedListItems: [],\r\n\tdescriptionItem: DescriptionItemInterface,\r\n\tcurrentItem: ItemInterface,\r\n\tbasePath: string,\r\n}\r\n\r\nconst initialState: State = {\r\n  listItems: [{} as ItemInterface],\r\n  removedListItems: [],\r\n  descriptionItem: {} as DescriptionItemInterface,\r\n  currentItem: {} as ItemInterface,\r\n  basePath: '',\r\n}\r\n\r\nexport const itemReducer = (\r\n  state: State = initialState,\r\n  action: Action<any>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_STATE_FROM_LOCAL_STORAGE:\r\n    return {\r\n      ...action.payload,\r\n    }\r\n  case ActionTypes.SET_LIST_ITEMS_IN_STORE:\r\n    return {\r\n      ...state,\r\n      listItems: action.payload\r\n    }\r\n  case ActionTypes.SET_CURRENT_ITEM_IN_STORE:\r\n    return {\r\n      ...state,\r\n      currentItem: action.payload\r\n    }\r\n  case ActionTypes.SET_STATUS_FOR_ITEM_IN_LIST_ITEMS:\r\n  {\r\n  \tlet newListItems = state.listItems.map(item=> {\r\n      if(item.id === action.payload) item.removed = true\r\n      return item\r\n    })\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  case ActionTypes.SET_STATUS_FOR_ITEM_IN_REMOVED_LIST_ITEMS:\r\n  {\r\n  \tlet newListItems = state.removedListItems.map(item=> {\r\n    // @ts-ignore\r\n      if(item.id === action.payload) item.removed = false\r\n      return item\r\n    })\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n  case ActionTypes.SET_REMOVE_DATA_FOR_ITEM:\r\n  {\r\n  \tlet newListItems = state.listItems.map(item=> {\r\n      if(item.id === action.payload.itemId) {\r\n        item.removedData = action.payload.data\r\n      }\r\n      return item\r\n    })\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  case ActionTypes.SET_RECOVER_DATA_FOR_ITEM:\r\n  {\r\n  \tlet newListItems = state.removedListItems.map(item=> {\r\n    // @ts-ignore\r\n      if(item.id === action.payload.itemId) item.recoveredData = action.payload.data\r\n      return item\r\n    })\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n  case ActionTypes.REMOVE_ITEM_FROM_LIST_ITEMS:\r\n  {\r\n    let newListItems = state.listItems.filter(item=>item.id !== action.payload)\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  \tcase ActionTypes.REMOVE_ITEM_FROM_REMOVED_LIST_ITEMS:\r\n  {\r\n    // @ts-ignore\r\n    let newListItems = state.removedListItems.filter(item=>item.id !== action.payload)\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n  case ActionTypes.CONCAT_ITEM_TO_LIST_ITEMS:\r\n  {\r\n    let newListItems = state.listItems.concat(action.payload).sort(\r\n      (a: ItemInterface, b: ItemInterface) =>{\r\n        if(a.name && b.name) return  a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n        return 0 //it's fake\r\n      }\r\n    )\r\n    return {\r\n      ...state,\r\n      listItems: newListItems\r\n    }}\r\n  case ActionTypes.CONCAT_ITEM_TO_REMOVED_LIST_ITEMS:\r\n  {\r\n    let newListItems = state.removedListItems.concat(action.payload).sort(\r\n      (a: ItemInterface, b: ItemInterface) =>{\r\n      \tif(a.name && b.name) return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n        return 0 //it's fake\r\n      }\r\n    )\r\n    return {\r\n      ...state,\r\n      removedListItems: newListItems\r\n    }}\r\n  case ActionTypes.SET_BASE_PATH_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n      basePath: action.payload\r\n\t\t  }\r\n  case ActionTypes.SET_DESCRIPTION_CURRENT_ITEM_IN_STORE:\r\n\t\t  return {\r\n\t\t    ...state,\r\n      descriptionItem: action.payload\r\n\t\t  }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { itemReducer } from \"./store/Item/Item.reduser\"\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n})\r\n","const axios = require(\"axios\")\r\n\r\nexport default class ServiceItem {\r\n  static getListItemsFromDB = async () => {\r\n    try {\r\n      console.log(\"hi\")\r\n      const response = await axios.get(`https://mrsoft.by/tz20/list.json`)\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getDescriptionCurrentItemFromDB = async (\r\n    basePath: string,\r\n    userLink: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(`${basePath}${userLink}`)\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LIST_ITEMS_LOADING_STATE: \"[loading] set list items loading state\",\r\n  SET_DESCRIPTION_ITEM_LOADING_STATE:\r\n    \"[loading] set description item loading state\",\r\n}\r\n\r\nexport const setListItemsLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_LIST_ITEMS_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n\r\nexport const setDescriptionItemLoadingState = (\r\n  loadingState: string\r\n): Action<string> => ({\r\n  type: ActionTypes.SET_DESCRIPTION_ITEM_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport ServiceItem from \"../../../services/service-Item\"\r\nimport { LoadingState } from \"../../../shared/constants/loadingStates.enum\"\r\nimport { ItemInterface } from \"../../InterfacesEntity/Item.interface\"\r\nimport {\r\n  ActionTypes,\r\n  setListItemsInStore,\r\n  setDescriptionCurrentItemInStore,\r\n  setBasePathInStore,\r\n  getFailureAction,\r\n} from \"./Item.actions\"\r\n\r\nimport {\r\n  setListItemsLoadingState,\r\n  setDescriptionItemLoadingState,\r\n} from \"../loading/loading.actions\"\r\n\r\nfunction* setListItemsInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setListItemsLoadingState(LoadingState.loading))\r\n    const response = yield ServiceItem.getListItemsFromDB()\r\n    if (response.data.length && response.data[0].id) {\r\n      yield response.data.sort((a: ItemInterface, b: ItemInterface) =>\r\n        a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\r\n      )\r\n      yield put(setListItemsInStore(response.data))\r\n      yield put(setBasePathInStore(response.basepath))\r\n      yield put(setListItemsLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setListItemsLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setListItemsLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* setDescriptionCurrentItemInStoreSaga(actions: any) {\r\n  try {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.loading))\r\n    const response = yield ServiceItem.getDescriptionCurrentItemFromDB(\r\n      actions.payload.basePath,\r\n      actions.payload.userLink\r\n    )\r\n    if (response.id) {\r\n      yield put(setDescriptionCurrentItemInStore(response))\r\n      yield put(setDescriptionItemLoadingState(LoadingState.loaded))\r\n    } else {\r\n      yield put(setDescriptionItemLoadingState(LoadingState.notFound))\r\n    }\r\n  } catch (e) {\r\n    yield put(setDescriptionItemLoadingState(LoadingState.error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* itemSaga() {\r\n  yield takeEvery(ActionTypes.GET_LIST_ITEMS_FROM_DB, setListItemsInStoreSaga)\r\n  yield takeEvery(\r\n    ActionTypes.GET_DESCRIPTION_CURRENT_ITEM_FROM_DB,\r\n    setDescriptionCurrentItemInStoreSaga\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { ItemInterface } from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport {\r\n  concatItemToListItems,\r\n  concatItemToRemovedListItems,\r\n  getDescriptionCurrentItemFromDB,\r\n  removeItemFromListItem,\r\n  removeItemFromRemovedListItem,\r\n  setRecoverDataForItem,\r\n  setRemoveDataForItem,\r\n  setStatusForItemInListItems,\r\n  setStatusForItemInRemovedListItems,\r\n  setCurrentItemInStore,\r\n} from \"../../Redux/store/Item/Item.actions\"\r\n\r\ntype CardItemProps = {\r\n  item: ItemInterface,\r\n  basePath: string,\r\n  dispatch: any,\r\n  className: string,\r\n}\r\n\r\nconst CardItem: React.FunctionComponent<CardItemProps> = ({\r\n  item,\r\n  basePath,\r\n  dispatch,\r\n  className,\r\n}) => {\r\n  const handleToggle = (removed: boolean) => {\r\n    if (!removed) {\r\n      dispatch(setStatusForItemInListItems(item.id))\r\n      dispatch(\r\n        setRemoveDataForItem(item.id, new Date().toString().slice(0, 24))\r\n      )\r\n      dispatch(removeItemFromListItem(item.id))\r\n      dispatch(concatItemToRemovedListItems(item))\r\n    } else {\r\n      dispatch(setStatusForItemInRemovedListItems(item.id))\r\n      dispatch(\r\n        setRecoverDataForItem(item.id, new Date().toString().slice(0, 24))\r\n      )\r\n      dispatch(removeItemFromRemovedListItem(item.id))\r\n      dispatch(concatItemToListItems(item))\r\n    }\r\n  }\r\n  return (\r\n    <li className={`${className} cardItemContainer`}>\r\n      <div\r\n        className={\"cardItemContainer_info\"}\r\n        onClick={() =>\r\n          !item.removed &&\r\n          dispatch(getDescriptionCurrentItemFromDB(basePath, item.more)) &&\r\n          dispatch(setCurrentItemInStore(item))\r\n        }\r\n      >\r\n        <p> {`name: ${item.name}`} </p>\r\n        <p> {`info: ${item.shortInfo}`} </p>\r\n        <p>\r\n          {(item.removed !== undefined &&\r\n            !item.removed &&\r\n            `recover data: ${item.recoveredData}`) ||\r\n            (item.removed && `remove data: ${item.removedData}`) ||\r\n            (item.removed === undefined && `haven't taken action yet`)}\r\n        </p>\r\n      </div>\r\n      <div className={\"cardItemContainer_remove\"}>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => handleToggle(item.removed || false)}\r\n          checked={item.removed || false}\r\n        />\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default CardItem\r\n","import React, { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n  getListItemsFromDB,\r\n  setStateFromLocalStorage,\r\n} from \"../../Redux/store/Item/Item.actions\"\r\nimport { ItemInterface } from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport { DescriptionItemInterface } from \"../../Redux/InterfacesEntity/DescriptionItem.interface\"\r\nimport List from \"@material-ui/core/List\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport CardItem from \"../CardItem/CardItem\"\r\n\r\nconst stateLoading: string = \"loaded\"\r\n\r\ntype ListItemsProps = {\r\n  state: {},\r\n  listItems: [ItemInterface],\r\n  removedListItems: [ItemInterface],\r\n  descriptionItem: DescriptionItemInterface,\r\n  basePath: string,\r\n  dispatch: any,\r\n}\r\n\r\nconst ListItems: React.FunctionComponent<ListItemsProps> = ({\r\n  state,\r\n  listItems,\r\n  removedListItems,\r\n  basePath,\r\n  dispatch,\r\n}) => {\r\n  useEffect(() => {\r\n    const stateStorage = JSON.parse(\r\n      localStorage.getItem(\"state\") || '{\"basePath\": \"\"}'\r\n    )\r\n    if (stateStorage.basePath) dispatch(setStateFromLocalStorage(stateStorage))\r\n    else dispatch(getListItemsFromDB())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(state))\r\n  }, [state])\r\n\r\n  return (\r\n    <>\r\n      {stateLoading === \"loading\" && <h1>loading</h1>}\r\n      {stateLoading === \"loaded\" && (\r\n        <Box component=\"div\" display=\"grid\" className={\"listItemsContainer\"}>\r\n          <List className={\"listItemsContainer_list\"}>\r\n            {listItems &&\r\n              listItems.length > 0 &&\r\n              listItems[0].id &&\r\n              listItems\r\n                .concat(removedListItems)\r\n                .map(\r\n                  (item: ItemInterface) =>\r\n                    (!item.removed && (\r\n                      <CardItem\r\n                        item={item}\r\n                        basePath={basePath}\r\n                        dispatch={dispatch}\r\n                        key={item.id}\r\n                        className={\"active_cart_item\"}\r\n                      />\r\n                    )) ||\r\n                    (item.removed && (\r\n                      <CardItem\r\n                        item={item}\r\n                        basePath={basePath}\r\n                        dispatch={dispatch}\r\n                        key={item.id}\r\n                        className={\"remove_cart_item\"}\r\n                      />\r\n                    ))\r\n                )}\r\n          </List>\r\n        </Box>\r\n      )}\r\n      {stateLoading === \"notFound\" && <h1>not found</h1>}\r\n      {stateLoading === \"error\" && <h1>error</h1>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  state: state.item,\r\n  listItems: state.item.listItems,\r\n  removedListItems: state.item.removedListItems,\r\n  descriptionItem: state.item.descriptionItem,\r\n  basePath: state.item.basePath,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ListItems)\r\n","import React, { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { DescriptionItemInterface } from \"../../Redux/InterfacesEntity/DescriptionItem.interface\"\r\nimport { ItemInterface } from \"../../Redux/InterfacesEntity/Item.interface\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\n\r\nconst stateLoading: string = \"loaded\"\r\n\r\ntype DescriptionItemProps = {\r\n  listItems: ItemInterface,\r\n  descriptionItem: DescriptionItemInterface,\r\n  currentItem: ItemInterface,\r\n  basePath: string,\r\n  dispatch: any,\r\n}\r\n\r\nconst DescriptionItem: React.FunctionComponent<DescriptionItemProps> = ({\r\n  listItems,\r\n  descriptionItem,\r\n  currentItem,\r\n  basePath,\r\n}) => {\r\n  useEffect(() => {}, [currentItem.removed, listItems])\r\n  return (\r\n    <>\r\n      {stateLoading === \"loading\" && <h1>loading</h1>}\r\n      {stateLoading === \"loaded\" &&\r\n        ((!descriptionItem.id && <h3>Choose item!</h3>) ||\r\n          (descriptionItem && currentItem.removed && (\r\n            <h3>This item had removed, choose another!</h3>\r\n          )) ||\r\n          (descriptionItem && !currentItem.removed && (\r\n            <Box\r\n              component=\"div\"\r\n              display=\"grid\"\r\n              className={\"descriptionItemContainer\"}\r\n            >\r\n              <Box\r\n                component=\"div\"\r\n                display=\"grid\"\r\n                className={\"descriptionItemContainer_name_and_avatar\"}\r\n              >\r\n                <Avatar\r\n                  alt=\"Cat\"\r\n                  src={`${basePath}${descriptionItem.pic}`}\r\n                  className={\"descriptionItemContainer_avatar\"}\r\n                />\r\n                <h4>{currentItem.name}</h4>\r\n                <p>{currentItem.shortInfo}</p>\r\n              </Box>\r\n              <Box\r\n                component=\"div\"\r\n                display=\"grid\"\r\n                className={\"descriptionItemContainer_bio\"}\r\n              >\r\n                {\" \"}\r\n                {descriptionItem.bio}\r\n              </Box>\r\n            </Box>\r\n          )))}\r\n      {stateLoading === \"notFound\" && <h1>not found</h1>}\r\n      {stateLoading === \"error\" && <h1>error</h1>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  listItems: state.item.listItems,\r\n  descriptionItem: state.item.descriptionItem,\r\n  currentItem: state.item.currentItem,\r\n  basePath: state.item.basePath,\r\n})\r\n\r\nexport default connect(mapStateToProps)(DescriptionItem)\r\n","import React from \"react\"\nimport \"./App.css\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport itemSaga from \"./Redux/store/Item/Item.sagas\"\nimport ListItems from \"./Components/ListItems/ListItems\"\nimport DescriptionItem from \"./Components/DescriptionItem/DescriptionItem\"\nimport Box from \"@material-ui/core/Box\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(itemSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Box component=\"div\" className={\"wrapper\"}>\n      <ListItems />\n      <DescriptionItem />\n    </Box>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}